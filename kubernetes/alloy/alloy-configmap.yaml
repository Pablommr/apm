apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-configmap
  namespace: monitoring
data:
  config.alloy: |-
    // Listening do Alloy
    otelcol.receiver.otlp "otlp_receiver" {
      grpc {
        endpoint = "0.0.0.0:4317"
        include_metadata = true
      }

      http {
        endpoint = "0.0.0.0:4318"
        include_metadata = true
      }
    
      output {
        traces = [otelcol.processor.k8sattributes.grafana_tempo.input]
        metrics = [otelcol.exporter.otlp.grafana_tempo.input]
        logs = [otelcol.exporter.otlp.grafana_tempo.input]
      }
    }

    // Envio de métricas do APM
    otelcol.exporter.otlp "grafana_tempo" {
      client {
        endpoint = "distributor-service:4317"
        tls {
    			insecure = true
    		}
      }

      sending_queue {
        enabled = true
        num_consumers = 20
        queue_size = 3000
      }
    }

    // Metadata para o APM
    otelcol.processor.k8sattributes "grafana_tempo" {
      auth_type = "serviceAccount"
      wait_for_metadata = true

      extract {
        label {
          from      = "pod"
          key_regex = "(.*)/(.*)"
          tag_name  = "$1.$2"
        }

        metadata = [
          "k8s.namespace.name",
          "k8s.node.name",
          "k8s.deployment.name",
          "k8s.pod.name",
          "k8s.pod.start_time",
          "k8s.container.name",
          "container.id",
          "container.image.name",
        ]
      }

      output {
        traces = [otelcol.processor.memory_limiter.grafana_tempo.input]
      }
    }

    // Queue para ser enviada para o APM
    otelcol.processor.memory_limiter "grafana_tempo" {
      check_interval = "3s"
      limit          = "256MiB"


      output {
        traces = [otelcol.exporter.otlp.grafana_tempo.input]
      }
    }

    ////////////////////////////////////////////////////////////////////////

    // Coleta métricas de Node
    prometheus.exporter.unix "node_metrics_collector" {}

    // Realiza o scrape nas métricas de nodes
    prometheus.scrape "metrics_node" {
      targets    = prometheus.exporter.unix.node_metrics_collector.targets
      forward_to = [prometheus.relabel.add_new_labels.receiver]
    }

    ////////////////////////////////////////////////////////////////////////

    // Métricas do Kubernetes
    discovery.kubernetes "pod" {
      role = "pod"
      
        selectors {
          role = "pod"
          field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
        }
      }

    // Realiza o scrape no kubernetes
    prometheus.scrape "pod" {
      targets    = discovery.kubernetes.pod.targets
      forward_to = [prometheus.relabel.add_new_labels.receiver]
    }

    ////////////////////////////////////////////////////////////////////////

    // Métricas do Kubelet
    discovery.kubelet "k8s_kubelet" {
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
    }

    // Realiza o scrape no kubelet
    prometheus.scrape "kubelet" {
      targets    = discovery.kubelet.k8s_kubelet.targets
      forward_to = [prometheus.relabel.add_new_labels.receiver]
    }

    ////////////////////////////////////////////////////////////////////////

    // Métricas de pod através do cadvisor
    prometheus.exporter.cadvisor "pod_metrics" {}

    // Realiza o scrape nas métricas de cadvisor
    prometheus.scrape "cadvisor_scrape" {
      targets    = prometheus.exporter.cadvisor.pod_metrics.targets
      forward_to = [prometheus.relabel.add_new_labels.receiver]
    }

    ////////////////////////////////////////////////////////////////////////

    // Adiciona novas labels
    prometheus.relabel "add_new_labels" {
      forward_to = [prometheus.remote_write.prometheus_metrics.receiver]

      rule {
        action = "replace"
        target_label = "cluster_name"
        replacement = ""
      }
    }

    // Componente de escrita remota para o Prometheus Metrics
    prometheus.remote_write "prometheus_metrics" {
      endpoint {
        url = "http://prometheus-metrics-service:9090/api/v1/write"
      }
    }

    // Log level do Alloy
    logging {
      level  = "warn"
      format = "json"
    }