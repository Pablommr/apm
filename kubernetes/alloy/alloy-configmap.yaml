apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-configmap
  namespace: monitoring
data:
  config.alloy: |-
    // Listening do Alloy
    otelcol.receiver.otlp "otlp_receiver" {
      grpc {
        endpoint = "0.0.0.0:4317"
        include_metadata = true
      }

      http {
        endpoint = "0.0.0.0:4318"
        include_metadata = true
      }
    
      output {
        traces = [otelcol.processor.k8sattributes.grafana_tempo.input]
      }
    }

    // Metadata para o APM
    otelcol.processor.k8sattributes "grafana_tempo" {
      auth_type = "serviceAccount"
      wait_for_metadata = true

      extract {
        label {
          from      = "pod"
          key_regex = "(.*)/(.*)"
          tag_name  = "$1.$2"
        }

        metadata = [
          "k8s.namespace.name",
          "k8s.node.name",
          "k8s.deployment.name",
          "k8s.pod.name",
          "k8s.pod.start_time",
          "k8s.container.name",
          "container.id",
          "container.image.name",
        ]
      }

      output {
        traces = [otelcol.processor.memory_limiter.grafana_tempo.input]
      }
    }

    // Queue para ser enviada para o APM
    otelcol.processor.memory_limiter "grafana_tempo" {
      check_interval = "3s"
      limit          = "256MiB"


      output {
        traces = [otelcol.exporter.otlp.grafana_tempo.input]
      }
    }

    // Envio de métricas do APM
    otelcol.exporter.otlp "grafana_tempo" {
      client {
        endpoint = "distributor-service:4317"
        tls {
    			insecure = true
    		}
      }

      sending_queue {
        enabled = true
        num_consumers = 20
        queue_size = 3000
      }
    }
    ////////////////////////////////////////////////////////////////////////

    // Descobrir os nós do Kubernetes.
    discovery.kubernetes "k8s_nodes" {
        role = "node"
    }

    // Coleta métricas de Node
    prometheus.exporter.unix "node_metrics_collector" {}

    // Relabel adress
    discovery.relabel "relabel_adress" {
      targets = discovery.kubernetes.k8s_nodes.targets

      // Regra para manter apenas o alvo cujo nome do nó corresponde à variável de ambiente.
      rule {
        action        = "keep"
        source_labels = ["__meta_kubernetes_node_name"]
        regex         = env("HOSTNAME")
      }

      // Transforma as meta-labels de node em labels permanentes
      rule {
        action  = "labelmap"
        // Este regex encontra todas as labels que começam com '__meta_kubernetes_node_label_'
        // e captura (a parte em parênteses) todo o resto do nome da label.
        regex   = "__meta_kubernetes_node_label_(.+)"
        // A ação labelmap então cria uma nova label usando o texto capturado ($1)
        // e atribui a ela o valor da label original.
      }

      rule {
        action       = "replace"
        source_labels = ["__address__"]
        target_label = "__address__"
        replacement  = "alloy.internal:12345"
      }
    }

    // Realiza o scrape nas métricas de nodes
    prometheus.scrape "metrics_node" {
      targets = discovery.relabel.relabel_adress.output

      metrics_path = "/api/v0/component/prometheus.exporter.unix.node_metrics_collector/metrics"

      forward_to = [prometheus.relabel.general_labels.receiver]
    }

    ////////////////////////////////////////////////////////////////////////

    // Coleta métricas de Pod
    prometheus.exporter.cadvisor "cadvisor" {}

    // Realiza o scrape nas métricas de pods
    prometheus.scrape "metrics_pods" {
      targets    = prometheus.exporter.cadvisor.cadvisor.targets
      forward_to = [prometheus.relabel.general_labels.receiver]
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////

    // Adiciona labels do Kubernetes. Todas as outras prometheus.relabel devem redirecionar para aqui
    prometheus.relabel "general_labels" {
      rule {
        action = "replace"
        target_label = "cluster_name"
        replacement = "iugu-core-131"
      }

      forward_to = [prometheus.remote_write.prometheus_metrics.receiver]
    }

    // Componente de escrita remota para o Prometheus Metrics
    prometheus.remote_write "prometheus_metrics" {
      endpoint {
        url = "http://prometheus-metrics-service:9090/api/v1/write"
      }
    }

    // Log level do Alloy
    logging {
      level  = "warn"
      format = "json"
    }

    // Debug no frontend
    livedebugging {
      enabled = true
    }